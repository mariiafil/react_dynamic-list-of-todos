{"version":3,"sources":["components/Todo.tsx","components/TodoList.tsx","api/getData.ts","components/Actions.tsx","index.tsx","App.tsx"],"names":["Todo","id","title","completed","user","className","name","TodoList","data","map","item","key","getData","url","a","fetch","response","json","getTodos","getUsers","Actions","sortByTitle","sortByUserName","sortByCompleted","type","onClick","ReactDOM","render","useState","isLoaded","setIsLoaded","isLoading","setIsLoading","todos","setTodos","Promise","all","todosFromServer","usersFromServer","todo","find","userId","sort","b","localeCompare","document","getElementById"],"mappings":"6PAwBeA,EAfS,SAAC,GAElB,IADLC,EACI,EADJA,GAAIC,EACA,EADAA,MAAOC,EACP,EADOA,UAAWC,EAClB,EADkBA,KAEtB,OACE,oCACE,uBAAGC,UAAU,SAAb,UAAyBJ,EAAzB,YAA+BC,IAC9BC,EACI,uBAAGE,UAAU,aAAb,OACA,uBAAGA,UAAU,gBAAb,MACJD,GAAS,2BAAIA,EAAKE,QCMVC,EAjBa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC7B,OACE,oCACE,yCACA,wBAAIH,UAAU,aACXG,EAAKC,KAAI,SAAAC,GAAI,OACZ,wBAAIL,UAAU,YAAYM,IAAKD,EAAKT,IAClC,oCACE,kBAAC,EAASS,W,eCfTE,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cACQG,EADR,yBAGSA,EAASC,QAHlB,4C,sBAMO,IAAMC,EAAW,WACtB,OAAON,EAAQ,+CAGJO,EAAW,WACtB,OAAOP,EAAQ,+CCHJQ,EAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,gBAAhC,OAChC,oCACE,4BAAQlB,UAAU,SAASmB,KAAK,SAASC,QAASJ,GAAlD,iBACA,4BAAQhB,UAAU,SAASmB,KAAK,SAASC,QAASH,GAAlD,gBACA,4BAAQjB,UAAU,SAASmB,KAAK,SAASC,QAASF,GAAlD,uBCRJG,IAASC,OACP,mBCCqB,WAAO,IAAD,EACGC,oBAAkB,GADrB,mBACtBC,EADsB,KACZC,EADY,OAEKF,oBAAkB,GAFvB,mBAEtBG,EAFsB,KAEXC,EAFW,OAGDJ,mBAAiB,IAHhB,mBAGpBK,EAHoB,KAGbC,EAHa,iDAK3B,kCAAApB,EAAA,6DACEgB,EAAYD,GAAW,GACvBG,EAAaH,GAAW,GAF1B,SAMYM,QAAQC,IAAI,CACpBlB,IACAC,MARJ,mCAIIkB,EAJJ,KAKIC,EALJ,KAUEJ,EAASG,EAAgB5B,KAAI,SAAC8B,GAAD,sBAEtBA,EAFsB,CAGzBnC,KAAMkC,EACLE,MAAK,SAACpC,GAAD,OAA2BA,EAAKH,KAAOsC,EAAKE,gBAEtDT,EAAaH,GAAW,GAhB1B,6CAL2B,sBAoD7B,OACG,oCACCA,GACA,kBAAC,EAAD,CACGN,gBAfL,WACEW,EAAS,YAAID,EACVS,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEb,GAAK0C,EAAE1C,MACxByC,MAAK,SAAC5B,EAAG6B,GAIV,OAHW7B,EAAEX,UAAY,EAAI,IAClBwC,EAAExC,UAAY,EAAI,SAW5BkB,YAjCL,WACEa,EAAS,YAAID,EACVS,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEb,GAAK0C,EAAE1C,MACxByC,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEZ,MAAM0C,cAAcD,EAAEzC,aA+BvCoB,eA5BL,WACEY,EAAS,YAAID,EACVS,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEb,GAAK0C,EAAE1C,MACxByC,MAAK,SAAC5B,EAAG6B,GACN,OAAI7B,EAAEV,MAAQuC,EAAEvC,KACPU,EAAEV,KAAKE,KAAKsC,cAAcD,EAAEvC,KAAKE,MAE9B,WAwBjBuB,GACA,4BACExB,UAAU,SACVmB,KAAK,SACLC,QAjEsB,4CA8DxB,kBAODM,EAAY,yCAAoB,kBAAC,EAAD,CAAUvB,KAAMyB,ODtElD,MACAY,SAASC,eAAe,U","file":"static/js/main.f0b0a8e2.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  id: number;\n  title: string;\n  completed: boolean;\n  user?: User;\n}\n\nconst Todo: FC<Props> = ({\n  id, title, completed, user,\n}) => {\n  return (\n    <>\n      <p className=\"title\">{`${id} ${title}`}</p>\n      {completed\n        ? (<p className=\"completed\">Yes</p>)\n        : (<p className=\"notCompleted\">No</p>)}\n      {user && (<p>{user.name}</p>)}\n    </>\n  );\n};\n\n\nexport default Todo;\n","import React, {FC} from 'react';\r\nimport Todo from './Todo';\r\n\r\ninterface Props {\r\n  data: Todo[];\r\n}\r\n\r\nconst TodoList: FC<Props> = ({ data }) => {\r\n  return (\r\n    <>\r\n      <h1>Todo List</h1>\r\n      <ul className=\"card-list\">\r\n        {data.map(item => (\r\n          <li className=\"card-item\" key={item.id}>\r\n            <>\r\n              <Todo {...item} />\r\n            </>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","async function getData(url: string) {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = () => {\n  return getData('https://jsonplaceholder.typicode.com/todos');\n};\n\nexport const getUsers = () => {\n  return getData('https://jsonplaceholder.typicode.com/users');\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  sortByTitle: () => void;\n  sortByUserName: () => void;\n  sortByCompleted: () => void;\n}\n\nexport const Actions: FC<Props> = ({ sortByTitle, sortByUserName, sortByCompleted }) => (\n  <>\n    <button className=\"button\" type=\"button\" onClick={sortByTitle}>Sort by title</button>\n    <button className=\"button\" type=\"button\" onClick={sortByUserName}>Sort by user</button>\n    <button className=\"button\" type=\"button\" onClick={sortByCompleted}>Sort by completed</button>\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, {FC, useState} from 'react';\nimport TodoList from './components/TodoList';\nimport './App.css';\nimport { getTodos, getUsers } from './api/getData';       \nimport { Actions } from './components/Actions';\n\nexport const  App:FC = () => {\n  let [isLoaded, setIsLoaded] = useState<boolean>(false);\n  let [isLoading, setIsLoading] = useState<boolean>(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  async function handleStart() {\n    setIsLoaded(isLoaded = true);\n    setIsLoading(isLoaded = true);\n    const [\n      todosFromServer,\n      usersFromServer,\n    ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]);\n    setTodos(todosFromServer.map((todo: { userId: number; }) => (\n      {\n        ...todo,\n        user: usersFromServer\n        .find((user: { id: number; }) => user.id === todo.userId),\n      })));\n    setIsLoading(isLoaded = false);\n  }\n\n  function sortByTitle() {    \n    setTodos([...todos\n      .sort((a, b) => a.id - b.id)\n      .sort((a, b) => a.title.localeCompare(b.title))]);  \n  }\n\n  function sortByUserName() {\n    setTodos([...todos\n      .sort((a, b) => a.id - b.id)\n      .sort((a, b) => {\n          if (a.user && b.user) {\n            return a.user.name.localeCompare(b.user.name)\n          }\n          else return 0;\n      })]);  \n  }\n\n  function sortByCompleted() {\n    setTodos([...todos\n      .sort((a, b) => a.id - b.id)\n      .sort((a, b) => {\n      const a1 = a.completed ? 1 : 0;\n      const b1 = b.completed ? 1 : 0;\n\n      return a1 - b1;\n    })]);\n  }\n      \nreturn (\n   <>\n   {isLoaded && \n    <Actions \n       sortByCompleted={sortByCompleted} \n       sortByTitle={sortByTitle} \n       sortByUserName={sortByUserName} \n    />}\n   \n   {!isLoaded && \n     <button \n       className=\"button\" \n       type=\"button\" \n       onClick={handleStart}\n     >\n       Press to start\n    </button>}   \n   {isLoading ? <p>Loading...</p> : <TodoList data={todos} />}   \n   </>\n  );\n}\n  "],"sourceRoot":""}