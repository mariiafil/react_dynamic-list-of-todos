{"version":3,"sources":["components/Todo.tsx","components/TodoList.tsx","api/getData.ts","api/constatns.ts","components/Actions.tsx","index.tsx","App.tsx"],"names":["Todo","id","title","completed","user","className","name","TodoList","data","map","item","key","getData","url","a","fetch","response","json","getTodos","getUsers","Actions","sortByTitle","sortByUserName","sortByCompleted","type","onClick","ReactDOM","render","useState","isLoaded","setIsLoaded","isLoading","setIsLoading","todos","setTodos","Promise","all","todosFromServer","usersFromServer","todo","find","userId","sort","b","Number","localeCompare","document","getElementById"],"mappings":"6PASaA,EAAkB,SAAC,GAEzB,IADLC,EACI,EADJA,GAAIC,EACA,EADAA,MAAOC,EACP,EADOA,UAAWC,EAClB,EADkBA,KAEtB,OACE,oCACE,uBAAGC,UAAU,SAAb,UAAyBJ,EAAzB,YAA+BC,IAC9BC,EACI,uBAAGE,UAAU,aAAb,OACA,uBAAGA,UAAU,iBAAb,MACJD,GAAS,2BAAIA,EAAKE,QCXZC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjC,oCACE,yCACA,wBAAIH,UAAU,aACXG,EAAKC,KAAI,SAAAC,GAAI,OACZ,wBAAIL,UAAU,YAAYM,IAAKD,EAAKT,IAClC,oCACE,kBAAC,EAASS,W,eCZPE,E,8EAAf,WAA2BC,GAA3B,eAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cACQG,EADR,yBAGSA,EAASC,QAHlB,4C,sBAMO,IAAMC,EAAW,WACtB,OAAON,ECTgB,+CDYZO,EAAW,WACtB,OAAOP,ECZe,+CCOXQ,EAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,gBAAhC,OAChC,oCACE,4BAAQlB,UAAU,SAASmB,KAAK,SAASC,QAASJ,GAAlD,iBACA,4BAAQhB,UAAU,SAASmB,KAAK,SAASC,QAASH,GAAlD,gBACA,4BAAQjB,UAAU,SAASmB,KAAK,SAASC,QAASF,GAAlD,uBCRJG,IAASC,OACP,mBCCqB,WAAO,IAAD,EACKC,oBAAS,GADd,mBACpBC,EADoB,KACVC,EADU,OAEOF,oBAAS,GAFhB,mBAEpBG,EAFoB,KAETC,EAFS,OAGDJ,mBAAiB,IAHhB,mBAGpBK,EAHoB,KAGbC,EAHa,iDAK3B,kCAAApB,EAAA,6DACEgB,GAAY,GACZE,GAAa,GAFf,SAOYG,QAAQC,IAAI,CACpBlB,IACAC,MATJ,mCAKIkB,EALJ,KAMIC,EANJ,KAYEJ,EAASG,EAAgB5B,KAAI,SAAC8B,GAAD,sBAEtBA,EAFsB,CAGzBnC,KAAMkC,EACHE,MAAK,SAACpC,GAAD,OAAUA,EAAKH,KAAOsC,EAAKE,gBAGvCT,GAAa,GAnBf,6CAL2B,sBAkD3B,OACE,oCACGH,GAED,kBAAC,EAAD,CACEN,gBAZN,WACEW,EAAS,YAAID,EACVS,MAAK,SAAC5B,EAAG6B,GACR,OAAOC,OAAO9B,EAAEX,WAAayC,OAAOD,EAAExC,iBAUtCkB,YA7BN,WACEa,EAAS,YAAID,EACVS,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEZ,MAAM2C,cAAcF,EAAEzC,aA4BtCoB,eAzBN,WACEY,EAAS,YAAID,EACVS,MAAK,SAAC5B,EAAG6B,GACR,OAAI7B,EAAEV,MAAQuC,EAAEvC,KACPU,EAAEV,KAAKE,KAAKuC,cAAcF,EAAEvC,KAAKE,MAGnC,WAsBPuB,GAED,4BACExB,UAAU,SACVmB,KAAK,SACLC,QAlEoB,4CA+DtB,kBAQAM,EAAY,yCAAoB,kBAAC,EAAD,CAAUvB,KAAMyB,ODxErD,MACAa,SAASC,eAAe,U","file":"static/js/main.c2f4de68.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  id: number;\n  title: string;\n  completed: boolean;\n  user?: User;\n}\n\nexport const Todo: FC<Props> = ({\n  id, title, completed, user,\n}) => {\n  return (\n    <>\n      <p className=\"title\">{`${id} ${title}`}</p>\n      {completed\n        ? (<p className=\"completed\">Yes</p>)\n        : (<p className=\"not-completed\">No</p>)}\n      {user && (<p>{user.name}</p>)}\n    </>\n  );\n};\n\n\nexport default Todo;\n","import React, { FC } from 'react';\nimport { Todo } from './Todo';\n\ninterface Props {\n  data: Todo[];\n}\n\nexport const TodoList: FC<Props> = ({ data }) => (\n  <>\n    <h1>Todo List</h1>\n    <ul className=\"card-list\">\n      {data.map(item => (\n        <li className=\"card-item\" key={item.id}>\n          <>\n            <Todo {...item} />\n          </>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n","import { URL_TODOS, URL_USES } from './constatns';\n\nasync function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData(URL_TODOS);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData(URL_USES);\n};\n","export const URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\r\nexport const URL_USES = 'https://jsonplaceholder.typicode.com/users';","import React, { FC } from 'react';\n\ninterface Props {\n  sortByTitle: () => void;\n  sortByUserName: () => void;\n  sortByCompleted: () => void;\n}\n\nexport const Actions: FC<Props> = ({ sortByTitle, sortByUserName, sortByCompleted }) => (\n  <>\n    <button className=\"button\" type=\"button\" onClick={sortByTitle}>Sort by title</button>\n    <button className=\"button\" type=\"button\" onClick={sortByUserName}>Sort by user</button>\n    <button className=\"button\" type=\"button\" onClick={sortByCompleted}>Sort by completed</button>\n  </>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport './App.css';\nimport { getTodos, getUsers } from './api/getData';\nimport { Actions } from './components/Actions';\n\nexport const App: FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  async function handleStart() {\n    setIsLoaded(true);\n    setIsLoading(true);\n\n    const [\n      todosFromServer,\n      usersFromServer,\n    ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]);\n\n    setTodos(todosFromServer.map((todo) => (\n      {\n        ...todo,\n        user: usersFromServer\n          .find((user) => user.id === todo.userId),\n      })));\n      \n    setIsLoading(false);\n  }\n\n  function sortByTitle() {\n    setTodos([...todos\n      .sort((a, b) => a.title.localeCompare(b.title))]);\n  }\n\n  function sortByUserName() {\n    setTodos([...todos\n      .sort((a, b) => {\n        if (a.user && b.user) {\n          return a.user.name.localeCompare(b.user.name);\n        }\n\n        return 0;\n      })]);\n  }\n\n  function sortByCompleted() {\n    setTodos([...todos\n      .sort((a, b) => {\n        return Number(a.completed) - Number(b.completed);\n      })]);\n  }\n\n  return (\n    <>\n      {isLoaded\n    && (\n      <Actions\n        sortByCompleted={sortByCompleted}\n        sortByTitle={sortByTitle}\n        sortByUserName={sortByUserName}\n      />\n    )}\n\n      {!isLoaded\n     && (\n       <button\n         className=\"button\"\n         type=\"button\"\n         onClick={handleStart}\n       >\n       Press to start\n       </button>\n     )}\n      {isLoading ? <p>Loading...</p> : <TodoList data={todos} />}\n    </>\n  );\n};\n"],"sourceRoot":""}